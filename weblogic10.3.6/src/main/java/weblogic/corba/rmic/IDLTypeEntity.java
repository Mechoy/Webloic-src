package weblogic.corba.rmic;

import java.io.File;
import java.util.Hashtable;
import weblogic.iiop.IDLUtils;
import weblogic.utils.compiler.CodeGenerationException;

public class IDLTypeEntity extends IDLType {
   public static final String OPENING_DECLARATION = "valuetype";
   public static final TypeTraits TRAITS = new TypeTraits() {
      public Class getValidClass(Class var1, Class var2) {
         return IDLMangler.isIDLEntity(var1) ? var1 : null;
      }

      public IDLType createType(Class var1, Class var2) {
         return new IDLTypeEntity(var1, var2);
      }
   };

   public IDLTypeEntity(Class var1, Class var2) {
      super(var1, var2);
   }

   public String getIncludeDeclaration() throws CodeGenerationException {
      String var1 = new String();
      return var1;
   }

   public String getForwardDeclaration() throws CodeGenerationException {
      String var1 = IDLUtils.generateInclude(this.getDirectory(), this.getJavaClass());
      return var1;
   }

   public String beforeMainDeclaration() {
      String var1 = IDLUtils.getIDLType(this.getJavaClass(), ".", "");
      String var2 = var1.substring(IDLMangler.BOXED_IDL.length() - 1);
      StringBuffer var3 = new StringBuffer();
      System.err.println("<Warning> You must provide the IDL definition for " + var2);
      System.err.println("<Warning> In general, do not mix CORBA and RMI programming models");
      var3.append("// The following include file has not been generated by ejbc because it\n");
      var3.append("// references an IDL type that already exists. You must supply this file\n");
      var3.append("// from the original IDL.\n");
      var3.append("#include \"");
      var3.append(var2.replace('.', File.separatorChar) + ".idl");
      var3.append("\"\n\n");
      return var3.toString();
   }

   public String getOpeningDeclaration() throws CodeGenerationException {
      Class var1 = this.getJavaClass();
      String var2 = IDLUtils.stripPackage(IDLUtils.getIDLType(var1, "."));
      String var3 = IDLUtils.getIDLType(var1);
      String var4 = var3.substring("::org::omg::boxedIDL::".length());
      StringBuffer var5 = new StringBuffer();
      var5.append("valuetype ");
      var5.append(var2 + " ");
      var5.append("::" + var4 + ";\n");
      return var5.toString();
   }

   public String getOpenBrace() {
      return "";
   }

   public String getCloseBrace() {
      return "";
   }

   public void getReferences(Hashtable var1) {
      Class var2 = this.getJavaClass();
      getAll(var2, var1, false);
   }

   public Hashtable getMethods() {
      return new Hashtable();
   }

   public Hashtable getAttributes() {
      return new Hashtable();
   }

   public String getPragmaID() {
      return IDLUtils.getPragmaID(this.getJavaClass());
   }

   public boolean canHaveSubtype(IDLType var1) {
      return false;
   }
}
