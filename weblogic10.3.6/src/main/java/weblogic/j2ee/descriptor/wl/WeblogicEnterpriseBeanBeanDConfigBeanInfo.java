package weblogic.j2ee.descriptor.wl;

import java.beans.BeanDescriptor;
import java.beans.PropertyDescriptor;
import java.beans.SimpleBeanInfo;
import java.util.ArrayList;

public class WeblogicEnterpriseBeanBeanDConfigBeanInfo extends SimpleBeanInfo {
   BeanDescriptor bd = new BeanDescriptor(WeblogicEnterpriseBeanBeanDConfig.class);
   static PropertyDescriptor[] pds = null;

   public BeanDescriptor getBeanDescriptor() {
      return this.bd;
   }

   public PropertyDescriptor[] getPropertyDescriptors() {
      if (pds != null) {
         return pds;
      } else {
         ArrayList var2 = new ArrayList();

         try {
            PropertyDescriptor var1 = new PropertyDescriptor("EjbName", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getEjbName", "setEjbName");
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", true);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("EntityDescriptor", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getEntityDescriptor", (String)null);
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("StatelessSessionDescriptor", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getStatelessSessionDescriptor", (String)null);
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("StatefulSessionDescriptor", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getStatefulSessionDescriptor", (String)null);
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("MessageDrivenDescriptor", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getMessageDrivenDescriptor", (String)null);
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("TransactionDescriptor", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getTransactionDescriptor", (String)null);
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("IiopSecurityDescriptor", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getIiopSecurityDescriptor", (String)null);
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("ResourceDescriptions", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getResourceDescriptions", (String)null);
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("ResourceEnvDescriptions", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getResourceEnvDescriptions", (String)null);
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("EjbReferenceDescriptions", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getEjbReferenceDescriptions", (String)null);
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("ServiceReferenceDescriptions", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getServiceReferenceDescriptions", (String)null);
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("EnableCallByReference", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "isEnableCallByReference", "setEnableCallByReference");
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("NetworkAccessPoint", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getNetworkAccessPoint", "setNetworkAccessPoint");
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", true);
            var1.setValue("key", false);
            var1.setValue("dynamic", true);
            var2.add(var1);
            var1 = new PropertyDescriptor("ClientsOnSameServer", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "isClientsOnSameServer", "setClientsOnSameServer");
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("RunAsPrincipalName", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getRunAsPrincipalName", "setRunAsPrincipalName");
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", true);
            var1.setValue("key", false);
            var1.setValue("dynamic", true);
            var2.add(var1);
            var1 = new PropertyDescriptor("CreateAsPrincipalName", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getCreateAsPrincipalName", "setCreateAsPrincipalName");
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", true);
            var1.setValue("key", false);
            var1.setValue("dynamic", true);
            var2.add(var1);
            var1 = new PropertyDescriptor("RemoveAsPrincipalName", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getRemoveAsPrincipalName", "setRemoveAsPrincipalName");
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", true);
            var1.setValue("key", false);
            var1.setValue("dynamic", true);
            var2.add(var1);
            var1 = new PropertyDescriptor("PassivateAsPrincipalName", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getPassivateAsPrincipalName", "setPassivateAsPrincipalName");
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", true);
            var1.setValue("key", false);
            var1.setValue("dynamic", true);
            var2.add(var1);
            var1 = new PropertyDescriptor("JNDIName", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getJNDIName", "setJNDIName");
            var1.setValue("dependency", false);
            var1.setValue("declaration", true);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("LocalJNDIName", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getLocalJNDIName", "setLocalJNDIName");
            var1.setValue("dependency", false);
            var1.setValue("declaration", true);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("DispatchPolicy", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getDispatchPolicy", "setDispatchPolicy");
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", true);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("RemoteClientTimeout", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getRemoteClientTimeout", "setRemoteClientTimeout");
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("StickToFirstServer", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "isStickToFirstServer", "setStickToFirstServer");
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            var1 = new PropertyDescriptor("Id", Class.forName("weblogic.j2ee.descriptor.wl.WeblogicEnterpriseBeanBeanDConfig"), "getId", "setId");
            var1.setValue("dependency", false);
            var1.setValue("declaration", false);
            var1.setValue("configurable", false);
            var1.setValue("key", false);
            var1.setValue("dynamic", false);
            var2.add(var1);
            pds = (PropertyDescriptor[])((PropertyDescriptor[])var2.toArray(new PropertyDescriptor[0]));
            return pds;
         } catch (Throwable var4) {
            var4.printStackTrace();
            throw new AssertionError("Failed to create PropertyDescriptors for WeblogicEnterpriseBeanBeanDConfigBeanInfo");
         }
      }
   }
}
