package weblogic.management.configuration;

import java.beans.BeanDescriptor;
import java.beans.IntrospectionException;
import java.beans.MethodDescriptor;
import java.beans.ParameterDescriptor;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.util.Map;
import weblogic.management.internal.mbean.BeanInfoHelper;

public class SNMPTrapSourceMBeanImplBeanInfo extends ConfigurationMBeanImplBeanInfo {
   public static Class INTERFACE_CLASS = SNMPTrapSourceMBean.class;

   public SNMPTrapSourceMBeanImplBeanInfo(boolean var1, String var2) throws IntrospectionException {
      super(var1, var2);
   }

   public SNMPTrapSourceMBeanImplBeanInfo() throws IntrospectionException {
   }

   protected BeanDescriptor buildBeanDescriptor() {
      Class var1 = null;

      try {
         var1 = SNMPTrapSourceMBeanImpl.class;
      } catch (Throwable var4) {
         var1 = INTERFACE_CLASS;
      }

      BeanDescriptor var2 = new BeanDescriptor(var1, (Class)null);
      var2.setValue("dynamic", Boolean.TRUE);
      var2.setValue("package", "weblogic.management.configuration");
      String var3 = (new String("<p>This MBean is the base of SNMP TRAP related configuration MBeans.</p>  <h3 class=\"TypeSafeDeprecation\">Deprecation of MBeanHome and Type-Safe Interfaces</h3>  <p class=\"TypeSafeDeprecation\">This is a type-safe interface for a WebLogic Server MBean, which you can import into your client classes and access through <code>weblogic.management.MBeanHome</code>. As of 9.0, the <code>MBeanHome</code> interface and all type-safe interfaces for WebLogic Server MBeans are deprecated. Instead, client classes that interact with WebLogic Server MBeans should use standard JMX design patterns in which clients use the <code>javax.management.MBeanServerConnection</code> interface to discover MBeans, attributes, and attribute types at runtime. For more information, see \"Developing Manageable Applications with JMX.\"</p> ")).intern();
      var2.setShortDescription(var3);
      var2.setValue("description", var3);
      var2.setValue("interfaceclassname", "weblogic.management.configuration.SNMPTrapSourceMBean");
      var2.setValue("generatedByWLSInfoBinder", Boolean.TRUE);
      return var2;
   }

   protected void buildPropertyDescriptors(Map var1) throws IntrospectionException {
      PropertyDescriptor var2 = null;
      if (!var1.containsKey("EnabledServers")) {
         String var3 = "getEnabledServers";
         String var4 = null;
         if (!this.readOnly) {
            var4 = "setEnabledServers";
         }

         var2 = new PropertyDescriptor("EnabledServers", SNMPTrapSourceMBean.class, var3, var4);
         var1.put("EnabledServers", var2);
         var2.setValue("description", "<p>This attribute is applicable only when the SNMP Agent is running on the Admin Server of a WebLogic Domain. The EnabledServers attribute allows the users to limit the scope of the monitored data sources to the specific named Servers. The EnabledServers list is ignored when the SNMAgentDeploymentMBean is targeted to a Managed Server. In the case of a Managed Server the SNMP Agent only looks at the data available in the WebLogic Server where the SNMP Agent is deployed. </p>  <p> For traps based on MBean attributes the SNMP Agent refers to the Domain Runtime MBean Server when it is running on the Admin Server and the Runtime MBean Server when it is deployed to a Managed Server. </p>  <p> In the case of <code>SNMPJMXMonitorMBean</code> and <code>SNMPAttributeChangeMBean</code> the <code>MonitoredMBeanType</code> and <code>MonitoredMBeanName</code> attributes specify the type and name of a WebLogic Server MBean for which the trap will be setup. MBeans that meet the Type and Name criteria are qualified to set the trap on. The EnabledServers attribute allows a user to specify additional criteria based on the Location of an MBean when the SNMP Agent is targeted to the Admin Server. MBeans whose Location matches one of the Servers in the EnabledServers list are considered eligible for the trap to be generated for a corresponding JMX notification. When the EnabledServers attribute is not specified all MBeans whose Type and Name match are considered as valid sources for the SNMP trap. </p>  <p> In the case of <code>SNMPLogFilterMBean</code> the EnabledServers attribute allows a user to specify the Servers in the Domain whose log messages will be monitored when the Agent is running on the Admin Server. When EnabledServers is not specified for an Agent running on the Admin Server log messages on all Managed Servers in the domain are monitored for sending traps. This attribute is not applicable when the SNMP Agent is targeted to a Managed Server, in this case the traps are sent based on log messages generated by the respective Managed Server where the Agent is deployed. </p> ");
         String[] var5 = new String[]{BeanInfoHelper.encodeEntities("weblogic.management.configuration.SNMPJMXMonitorMBean"), BeanInfoHelper.encodeEntities("weblogic.management.configuration.SNMPAttributeChangeMBean")};
         var2.setValue("see", var5);
         var2.setValue("secureValueNull", Boolean.TRUE);
         var2.setValue("relationship", "reference");
         var2.setValue("adder", "addEnabledServer");
         var2.setValue("remover", "removeEnabledServer");
         var2.setValue("dynamic", Boolean.TRUE);
      }

      super.buildPropertyDescriptors(var1);
   }

   private void fillinFactoryMethodInfos(Map var1) throws IntrospectionException, NoSuchMethodException {
   }

   private void fillinCollectionMethodInfos(Map var1) throws IntrospectionException, NoSuchMethodException {
      Method var3 = SNMPTrapSourceMBean.class.getMethod("addEnabledServer", ServerMBean.class);
      ParameterDescriptor[] var4 = new ParameterDescriptor[]{createParameterDescriptor("server", "The feature to be added to the EnabledServer attribute ")};
      String var5 = BeanInfoHelper.buildMethodKey(var3);
      MethodDescriptor var2;
      if (!var1.containsKey(var5)) {
         var2 = new MethodDescriptor(var3, var4);
         var1.put(var5, var2);
         var2.setValue("description", "<p>Adds a feature to the EnabledServer attribute of the SNMPTrapSourceMBean object</p> ");
         var2.setValue("role", "collection");
         var2.setValue("property", "EnabledServers");
      }

      var3 = SNMPTrapSourceMBean.class.getMethod("removeEnabledServer", ServerMBean.class);
      var4 = new ParameterDescriptor[]{createParameterDescriptor("server", (String)null)};
      var5 = BeanInfoHelper.buildMethodKey(var3);
      if (!var1.containsKey(var5)) {
         var2 = new MethodDescriptor(var3, var4);
         var1.put(var5, var2);
         var2.setValue("description", " ");
         var2.setValue("role", "collection");
         var2.setValue("property", "EnabledServers");
      }

   }

   private void fillinFinderMethodInfos(Map var1) throws IntrospectionException, NoSuchMethodException {
   }

   private void fillinOperationMethodInfos(Map var1) throws IntrospectionException, NoSuchMethodException {
   }

   protected void buildMethodDescriptors(Map var1) throws IntrospectionException, NoSuchMethodException {
      this.fillinFinderMethodInfos(var1);
      if (!this.readOnly) {
         this.fillinCollectionMethodInfos(var1);
         this.fillinFactoryMethodInfos(var1);
      }

      this.fillinOperationMethodInfos(var1);
      super.buildMethodDescriptors(var1);
   }

   protected void buildEventSetDescriptors(Map var1) throws IntrospectionException {
   }
}
