package weblogic.management.tools;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PrintStream;
import java.util.Date;
import java.util.Iterator;
import java.util.Properties;
import java.util.TreeMap;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanConstructorInfo;
import javax.management.MBeanNotificationInfo;
import javax.management.MBeanOperationInfo;
import weblogic.management.info.ExtendedAttributeInfo;
import weblogic.management.info.ExtendedInfo;
import weblogic.management.info.ExtendedOperationInfo;
import weblogic.utils.StringUtils;

public class Info extends ExtendedInfo {
   static final long serialVersionUID = 1L;
   private static boolean listProtectedAttributesInfo = Boolean.getBoolean("weblogic.management.tools.Info.listProtectedAttributesInfo");
   private static boolean verbose = false;
   private static boolean replacedChars = false;
   private static PrintStream infoOut;
   private String[] interfaces;
   private String shortInterfaceName = null;

   public Info(String var1, String[] var2, String var3, ExtendedAttributeInfo[] var4, MBeanConstructorInfo[] var5, ExtendedOperationInfo[] var6, MBeanNotificationInfo[] var7, boolean var8, boolean var9, boolean var10, String var11, String var12, String var13, boolean var14, String var15) {
      super(var1, var3, permute(var1, (AttributeInfo[])((AttributeInfo[])var4)), var5, (MBeanOperationInfo[])((MBeanOperationInfo[])var6), var7, var8, var9, var10, var11, var12, var13, var14, var15);
      this.interfaces = var2;
   }

   public static void main(String[] var0) throws Exception {
      for(int var1 = 0; var1 < var0.length; ++var1) {
         if ("-verbose".equals(var0[var1])) {
            verbose = true;
         } else {
            if (var0[var1].charAt(0) == '-') {
               System.err.println("Usage: java weblogic.management.tools.Info [-verbose] [<filename>]\nThis tool ASSUMES it is being run from the src root and it assumes that all MBeans live under weblogic/management\nerrors are printed on System.err and all the \"results\" go to .out or the file specified as an argument\neg. java -Dweblogic.management.tools.Info.listProtectedAttributesInfo=true weblogic.management.tools.Info > /temp/protectedAttributeNames.properties\neg. java weblogic.management.tools.Info > /temp/attributeNames.properties");
               System.exit(0);
            }

            infoOut = new PrintStream(new FileOutputStream(var0[var1]));
         }
      }

      infoOut.println("#Please do not Edit this file, use \"java -Dweblogic.management.tools.Info.listProtectedAttributesInfo=<true/false> weblogic.management.tools.Info\" to recreate this file");
      infoOut.println("#Generated on " + new Date());
      walk(new File("weblogic/management"));
   }

   private static AttributeInfo[] permute(String var0, AttributeInfo[] var1) {
      Properties var2 = new Properties();

      try {
         var2.load(Info.class.getResourceAsStream("attributeNames.properties"));
      } catch (IOException var9) {
         throw new Error(var9.toString());
      }

      String var3 = var2.getProperty(var0);
      if (var3 == null) {
         var3 = "";
      }

      String[] var4 = StringUtils.splitCompletely(var3, ",");
      AttributeInfo[] var5 = new AttributeInfo[var1.length];
      TreeMap var6 = new TreeMap();

      int var7;
      for(var7 = 0; var7 < var1.length; ++var7) {
         var6.put(var1[var7].getName(), var1[var7]);
      }

      for(var7 = 0; var7 < var4.length; ++var7) {
         var5[var7] = (AttributeInfo)var6.remove(var4[var7]);
         if (var5[var7] == null) {
            throw new Error("deleted attribute: " + var4[var7]);
         }
      }

      var7 = var4.length;

      for(Iterator var8 = var6.values().iterator(); var8.hasNext(); var5[var7++] = (AttributeInfo)var8.next()) {
      }

      return var5;
   }

   private static String printAttribute(MBeanAttributeInfo var0) {
      return var0.toString();
   }

   private static void walk(File var0) {
      final String var1 = var0.getPath() + File.separatorChar;
      if (verbose) {
         System.err.println("walking : " + var0);
      }

      if (var0.isDirectory() && var0.getName().indexOf("console") < 0) {
         File[] var2 = var0.listFiles(new FilenameFilter() {
            public boolean accept(File var1x, String var2) {
               if (var1x.isDirectory()) {
                  return true;
               } else {
                  Info.checkFileName(var1 + var2);
                  return false;
               }
            }
         });

         for(int var3 = 0; var3 < var2.length; ++var3) {
            walk(var2[var3]);
         }
      } else {
         checkFileName(var0.getPath());
      }

   }

   private static void checkFileName(String var0) {
      if (var0.endsWith("MBean.java") && (var0.indexOf("descriptors") < 0 || listProtectedAttributesInfo)) {
         if (verbose) {
            System.err.println("checkFileName : " + var0);
         }

         var0 = var0.substring(0, var0.length() - ".java".length()) + ".mbi";
         if (File.separatorChar != '/') {
            var0 = var0.replace(File.separatorChar, '/');
            replacedChars = true;
         }

         listAttributesForInfo(var0);
      }

   }

   private static void listAttributesForInfo(String var0) {
      InputStream var1 = Info.class.getClassLoader().getResourceAsStream(var0);

      try {
         if (var1 != null) {
            Info var2 = (Info)(new ObjectInputStream(var1)).readObject();
            StringBuffer var3 = new StringBuffer();
            String var4 = ",";
            MBeanAttributeInfo[] var5 = var2.getAttributes();

            for(int var6 = 0; var6 < var5.length; ++var6) {
               if (!listProtectedAttributesInfo) {
                  var3.append(var5[var6].getName()).append(var4);
               } else if (listProtectedAttributesInfo) {
                  ExtendedAttributeInfo var7 = (ExtendedAttributeInfo)var5[var6];
                  if (var7.isEncrypted() || var7.getProtectionLevel() > 0) {
                     var3.append(var5[var6].getName()).append(var4);
                  }
               }
            }

            if (var3.toString().endsWith(var4)) {
               var3.setLength(var3.length() - 1);
            }

            var0 = var0.substring(0, var0.indexOf(".mbi"));
            char var9 = File.separatorChar;
            if (replacedChars) {
               var9 = '/';
            }

            var0 = var0.replace(var9, '.');
            if (listProtectedAttributesInfo && var3.toString().trim().length() != 0) {
               infoOut.println(var0 + "=" + var3);
            } else if (!listProtectedAttributesInfo) {
               infoOut.println(var0 + "=" + var3);
            }
         } else if (verbose) {
            System.err.println("Did not find : " + var0);
         }
      } catch (Exception var8) {
         var8.printStackTrace();
         System.exit(-1);
      }

   }

   public String[] getInterfaces() {
      return this.interfaces;
   }

   public String getShortInterfaceName() {
      if (this.shortInterfaceName == null) {
         this.shortInterfaceName = AttributeInfo.Helper.trimPackage(this.getClassName());
      }

      return this.shortInterfaceName;
   }

   public String toString(boolean var1) {
      if (!var1) {
         return super.toString();
      } else {
         StringBuffer var2 = new StringBuffer();
         var2.append("MBeanInfo for " + this.getClassName());
         var2.append("\n\n description: " + this.getDescription());
         var2.append("\n\n customizer: " + this.getCustomizerClass());
         var2.append("\n\n Attributes:");
         MBeanAttributeInfo[] var3 = this.getAttributes();

         for(int var4 = 0; var4 < var3.length; ++var4) {
            var2.append("\n\t" + printAttribute(var3[var4]));
         }

         var2.append("\n\n operations:");
         MBeanOperationInfo[] var6 = this.getOperations();

         for(int var5 = 0; var5 < var6.length; ++var5) {
            var2.append("\n\t" + var6[var5].getName());
         }

         return var2.toString();
      }
   }

   static {
      infoOut = System.out;
   }
}
