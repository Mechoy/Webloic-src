package weblogic.wsee.monitoring;

import java.beans.BeanDescriptor;
import java.beans.IntrospectionException;
import java.beans.MethodDescriptor;
import java.beans.ParameterDescriptor;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.util.Map;
import weblogic.management.internal.mbean.BeanInfoHelper;
import weblogic.management.runtime.WseePortRuntimeMBean;
import weblogic.management.runtime.WseeV2RuntimeMBean;

public class WseeV2RuntimeMBeanImplBeanInfo extends WseeBaseRuntimeMBeanImplBeanInfo {
   public static Class INTERFACE_CLASS = WseeV2RuntimeMBean.class;

   public WseeV2RuntimeMBeanImplBeanInfo(boolean var1, String var2) throws IntrospectionException {
      super(var1, var2);
   }

   public WseeV2RuntimeMBeanImplBeanInfo() throws IntrospectionException {
   }

   protected BeanDescriptor buildBeanDescriptor() {
      Class var1 = null;

      try {
         var1 = WseeV2RuntimeMBeanImpl.class;
      } catch (Throwable var4) {
         var1 = INTERFACE_CLASS;
      }

      BeanDescriptor var2 = new BeanDescriptor(var1, (Class)null);
      var2.setValue("since", "10.3.3.0");
      var2.setValue("package", "weblogic.wsee.monitoring");
      String var3 = (new String("<p>Encapsulates runtime information about a particular Web Service. The name attribute of this MBean will be the value of the webservice-description-name element in webservices.xml</p> ")).intern();
      var2.setShortDescription(var3);
      var2.setValue("description", var3);
      var2.setValue("interfaceclassname", "weblogic.management.runtime.WseeV2RuntimeMBean");
      var2.setValue("generatedByWLSInfoBinder", Boolean.TRUE);
      return var2;
   }

   protected void buildPropertyDescriptors(Map var1) throws IntrospectionException {
      PropertyDescriptor var2 = null;
      String var3;
      Object var4;
      if (!var1.containsKey("ContextPath")) {
         var3 = "getContextPath";
         var4 = null;
         var2 = new PropertyDescriptor("ContextPath", WseeV2RuntimeMBean.class, var3, (String)var4);
         var1.put("ContextPath", var2);
         var2.setValue("description", "<p>Specifies the context path of this web service.</p> <p>This attribute corresponds to the initial part of the endpoint address in the WSDL that describes the Web Service.  It is specified at development time in JAX-RPC services using the contextPath attribute of the &#64;WLXXXTransport JWS annotation, where XXX refers to the transport, such as HTTP, HTTPS, or JMS. For JAX-WS services the context path is set either during compilation of the service, or by the module (web or EJB) hosting the service.</p> ");
         var2.setValue("unharvestable", Boolean.TRUE);
      }

      if (!var1.containsKey("ConversationInstanceCount")) {
         var3 = "getConversationInstanceCount";
         var4 = null;
         var2 = new PropertyDescriptor("ConversationInstanceCount", WseeV2RuntimeMBean.class, var3, (String)var4);
         var1.put("ConversationInstanceCount", var2);
         var2.setValue("description", "<p> Lists the instance count of conversations for this app + version ");
         var2.setValue("unharvestable", Boolean.TRUE);
         var2.setValue("exclude", Boolean.TRUE);
      }

      if (!var1.containsKey("ImplementationType")) {
         var3 = "getImplementationType";
         var4 = null;
         var2 = new PropertyDescriptor("ImplementationType", WseeV2RuntimeMBean.class, var3, (String)var4);
         var1.put("ImplementationType", var2);
         var2.setValue("description", "<p> Specifies the implementation type of this service. </p>  <p> Valid values include: JAX-WS 2.0 JAX-RPC 1.1 </p> ");
         var2.setValue("unharvestable", Boolean.TRUE);
      }

      if (!var1.containsKey("OwsmSecurityPolicyRuntime")) {
         var3 = "getOwsmSecurityPolicyRuntime";
         var4 = null;
         var2 = new PropertyDescriptor("OwsmSecurityPolicyRuntime", WseeV2RuntimeMBean.class, var3, (String)var4);
         var1.put("OwsmSecurityPolicyRuntime", var2);
         var2.setValue("description", "<p> Lists the Oracle WSM security policy files that are attached to this Web service. </p> ");
         var2.setValue("relationship", "containment");
         var2.setValue("exclude", Boolean.TRUE);
      }

      if (!var1.containsKey("PolicyFaults")) {
         var3 = "getPolicyFaults";
         var4 = null;
         var2 = new PropertyDescriptor("PolicyFaults", WseeV2RuntimeMBean.class, var3, (String)var4);
         var1.put("PolicyFaults", var2);
         var2.setValue("description", "<p> Total number of faults generated by security policy handler. </p> ");
      }

      if (!var1.containsKey("PolicyRuntime")) {
         var3 = "getPolicyRuntime";
         var4 = null;
         var2 = new PropertyDescriptor("PolicyRuntime", WseeV2RuntimeMBean.class, var3, (String)var4);
         var1.put("PolicyRuntime", var2);
         var2.setValue("description", "<p> Lists the WS-Policy files that are associated with this Web Service. </p> ");
         var2.setValue("relationship", "containment");
      }

      if (!var1.containsKey("Ports")) {
         var3 = "getPorts";
         var4 = null;
         var2 = new PropertyDescriptor("Ports", WseeV2RuntimeMBean.class, var3, (String)var4);
         var1.put("Ports", var2);
         var2.setValue("description", "<p> Lists the ports that are associated with this Web service. </p> ");
         var2.setValue("relationship", "reference");
         var2.setValue("adder", "addPort");
      }

      if (!var1.containsKey("ServiceName")) {
         var3 = "getServiceName";
         var4 = null;
         var2 = new PropertyDescriptor("ServiceName", WseeV2RuntimeMBean.class, var3, (String)var4);
         var1.put("ServiceName", var2);
         var2.setValue("description", "<p> Specifies the qualified name of this Web service. </p>  <p> This attribute is calculated based on actual MBean type and of the form <br> <code>WseeRuntimeMBean</code>: &lt;app name&gt;#&lt;app version&gt;!&lt;service name&gt;. <br> <code>WseeV2RuntimeMBean</code>: &lt;app name&gt;#&lt;app version&gt;!&lt;web WAR name or EJB JAR name&gt;!&lt;service name&gt;. <br> <p> ");
         var2.setValue("unharvestable", Boolean.TRUE);
      }

      if (!var1.containsKey("StartTime")) {
         var3 = "getStartTime";
         var4 = null;
         var2 = new PropertyDescriptor("StartTime", WseeV2RuntimeMBean.class, var3, (String)var4);
         var1.put("StartTime", var2);
         var2.setValue("description", "<p> Date and time that the Web service starts. </p> ");
      }

      if (!var1.containsKey("TotalFaults")) {
         var3 = "getTotalFaults";
         var4 = null;
         var2 = new PropertyDescriptor("TotalFaults", WseeV2RuntimeMBean.class, var3, (String)var4);
         var1.put("TotalFaults", var2);
         var2.setValue("description", "<p> Total number of faults generated by this endpoint. </p> ");
      }

      if (!var1.containsKey("TotalSecurityFaults")) {
         var3 = "getTotalSecurityFaults";
         var4 = null;
         var2 = new PropertyDescriptor("TotalSecurityFaults", WseeV2RuntimeMBean.class, var3, (String)var4);
         var1.put("TotalSecurityFaults", var2);
         var2.setValue("description", "<p> Total number of faults generated by this endpoint. </p> ");
      }

      if (!var1.containsKey("URI")) {
         var3 = "getURI";
         var4 = null;
         var2 = new PropertyDescriptor("URI", WseeV2RuntimeMBean.class, var3, (String)var4);
         var1.put("URI", var2);
         var2.setValue("description", "<p> Specifies the URI of this Web service. </p>  <p> This attribute corresponds to the final part of the endpoint address in the WSDL that describes the Web Services. It is specified at development time for JAX-RPC services using the serviceURI attribute of the &#64;WLXXXTransport JWS annotation, where XXX refers to the transport, such as HTTP, HTTPS, or JMS. For JAX-WS services, this can be set during compilation. </p> ");
         var2.setValue("unharvestable", Boolean.TRUE);
      }

      if (!var1.containsKey("WebserviceDescriptionName")) {
         var3 = "getWebserviceDescriptionName";
         var4 = null;
         var2 = new PropertyDescriptor("WebserviceDescriptionName", WseeV2RuntimeMBean.class, var3, (String)var4);
         var1.put("WebserviceDescriptionName", var2);
         var2.setValue("description", "webservice description name for this webservice ");
      }

      if (!var1.containsKey("WsType")) {
         var3 = "getWsType";
         var4 = null;
         var2 = new PropertyDescriptor("WsType", WseeV2RuntimeMBean.class, var3, (String)var4);
         var1.put("WsType", var2);
         var2.setValue("description", "<p> Returns the type of this web service, either JAX-WS or JAX-RPC. </p> ");
      }

      super.buildPropertyDescriptors(var1);
   }

   private void fillinFactoryMethodInfos(Map var1) throws IntrospectionException, NoSuchMethodException {
   }

   private void fillinCollectionMethodInfos(Map var1) throws IntrospectionException, NoSuchMethodException {
      Method var3 = WseeV2RuntimeMBean.class.getMethod("addPort", WseePortRuntimeMBean.class);
      String var4 = BeanInfoHelper.buildMethodKey(var3);
      if (!var1.containsKey(var4)) {
         MethodDescriptor var2 = new MethodDescriptor(var3, (ParameterDescriptor[])null);
         var1.put(var4, var2);
         var2.setValue("description", "<p> Add a WseePortRuntimeMBean instance to this Web service and register it. WseePortRuntimeMBean with same name would not be registered twice. </p> ");
         var2.setValue("exclude", Boolean.TRUE);
         var2.setValue("unharvestable", Boolean.TRUE);
         var2.setValue("role", "collection");
         var2.setValue("property", "Ports");
      }

   }

   private void fillinFinderMethodInfos(Map var1) throws IntrospectionException, NoSuchMethodException {
   }

   private void fillinOperationMethodInfos(Map var1) throws IntrospectionException, NoSuchMethodException {
      Method var3 = WseeV2RuntimeMBean.class.getMethod("preDeregister");
      String var4 = BeanInfoHelper.buildMethodKey(var3);
      if (!var1.containsKey(var4)) {
         MethodDescriptor var2 = new MethodDescriptor(var3, (ParameterDescriptor[])null);
         var1.put(var4, var2);
         var2.setValue("description", " ");
         var2.setValue("role", "operation");
      }

   }

   protected void buildMethodDescriptors(Map var1) throws IntrospectionException, NoSuchMethodException {
      this.fillinFinderMethodInfos(var1);
      if (!this.readOnly) {
         this.fillinCollectionMethodInfos(var1);
         this.fillinFactoryMethodInfos(var1);
      }

      this.fillinOperationMethodInfos(var1);
      super.buildMethodDescriptors(var1);
   }

   protected void buildEventSetDescriptors(Map var1) throws IntrospectionException {
   }
}
